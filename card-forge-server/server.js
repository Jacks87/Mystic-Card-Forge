// Load environment variables from .env file
require('dotenv').config(); 
const express = require('express');
const cors = require('cors');
const { OpenAI } = require('openai');

const app = express();
const PORT = process.env.PORT || 3000;

// === REVISION 1: CRITICAL API KEY CHECK ===
if (!process.env.OPENAI_API_KEY) {
    console.error("CRITICAL ERROR: OPENAI_API_KEY is not set in the .env file.");
    // Exit the process if the key is missing, preventing runtime errors.
    process.exit(1); 
}
// Initialize OpenAI client
const openai = new OpenAI({
Â  Â  apiKey: process.env.OPENAI_API_KEY,
});

// IMPORTANT: Configure CORS to allow access from your Live Server port (e.g., 5500 or 5501)
app.use(cors({
Â  Â  origin: ['http://127.0.0.1:5500', 'http://localhost:5500', 'http://127.0.0.1:5501', 'http://localhost:5501']
}));

app.use(express.json());

// =========================================================
// ENDPOINT 1: TEXT REFINEMENT (Original Functionality)
// Takes existing card inputs and refines the title/ability.
// =========================================================
app.post('/api/generate-card', async (req, res) => {
Â  Â  const { currentTitle, currentAbility, manaCost } = req.body;

Â  Â  const manaString = Object.entries(manaCost)
Â  Â  Â  Â  .filter(([, count]) => count > 0)
Â  Â  Â  Â  .map(([color, count]) => `${count} ${color}`)
Â  Â  Â  Â  .join(', ');

Â  Â  const prompt = `Refine the ability text and title for a trading card with the following details. 
Â  Â  Title: "${currentTitle}"
Â  Â  Mana Cost: ${manaString || 'No Cost'}
Â  Â  Current Ability: "${currentAbility}"
Â  Â  
Â  Â  The output MUST ONLY be a single JSON object (no markdown formatting) that is strictly parsable, containing:
Â  Â  "name": "string" (the refined title),
Â  Â  "rules_text": "string" (the refined ability text),
Â  Â  "power": "string" (creature power, e.g., "3"),
Â  Â  "toughness": "string" (creature toughness, e.g., "4").
Â  Â  Infer the power/toughness based on the current text and mana cost.`;

Â  Â  try {
Â  Â  Â  Â  const completion = await openai.chat.completions.create({
Â  Â  Â  Â  Â  Â  model: 'gpt-3.5-turbo',
Â  Â  Â  Â  Â  Â  messages: [{ role: 'user', content: prompt }],
Â  Â  Â  Â  Â  Â  response_format: { type: "json_object" },
Â  Â  Â  Â  Â  Â  temperature: 0.8
Â  Â  Â  Â  });

Â  Â  Â  Â  const cardDetails = JSON.parse(completion.choices[0].message.content.trim());
Â  Â  Â  Â  res.json(cardDetails);

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("GPT Text Generation Error:", error.message);
Â  Â  Â  Â  res.status(500).json({ error: "Failed to generate card details.", details: error.message });
Â  Â  }
});


// =========================================================
// ENDPOINT 2: FULL GENERATION (Text + Image)
// Takes a simple prompt and generates all card fields plus art.
// =========================================================
app.post('/api/generate-full-card', async (req, res) => {
Â  Â  const { prompt: userMainPrompt } = req.body; 

Â  Â  if (!userMainPrompt) {
Â  Â  Â  Â  return res.status(400).json({ error: "A prompt is required for full card generation." });
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  // --- Step 1: Generate Card Text Details + Image Prompt using GPT ---
Â  Â  Â  Â  const textGenerationPrompt = `You are an expert fantasy card designer. Create a unique card based on the concept: "${userMainPrompt}".
Â  Â  Â  Â  
Â  Â  Â  Â  The output MUST ONLY be a single JSON object that is strictly parsable. It needs the following fields:
Â  Â  Â  Â  "name": "string" (the card's name),
Â  Â  Â  Â  "rules_text": "string" (the ability text),
Â  Â  Â  Â  "power": "string or number" (power),
Â  Â  Â  Â  "toughness": "string or number" (toughness),
Â  Â  Â  Â  "signature": "string" (artist signature/flavor text),
Â  Â  Â  Â  "card_color": "string" (a hex color for the card's background, e.g., "#008000" for Green, "#B22222" for Red, "#A9A9A9" for Colorless),
Â  Â  Â  Â  "mana_cost": { "white": number, "blue": number, "black": number, "red": number, "green": number, "colorless": number } (mana values),
Â  Â  Â  Â  "image_description": "string" (a detailed, evocative prompt for DALL-E, e.g., "A muscular warrior fighting a hydra in a glowing cavern, fantasy concept art").`;
Â  Â  Â  Â  
Â  Â  Â  Â  const textCompletion = await openai.chat.completions.create({
Â  Â  Â  Â  Â  Â  model: 'gpt-4o', // Using gpt-4o for better structured JSON output
Â  Â  Â  Â  Â  Â  messages: [{ role: 'user', content: textGenerationPrompt }],
Â  Â  Â  Â  Â  Â  response_format: { type: "json_object" },
Â  Â  Â  Â  Â  Â  temperature: 0.8
Â  Â  Â  Â  });

Â  Â  Â  Â  const cardDetails = JSON.parse(textCompletion.choices[0].message.content.trim());

Â  Â  Â  Â  // --- Step 2: Generate Image using DALL-E 3 ---
Â  Â  Â  Â  const imageResponse = await openai.images.generate({
Â  Â  Â  Â  Â  Â  model: "dall-e-3", 
Â  Â  Â  Â  Â  Â  prompt: cardDetails.image_description, 
Â  Â  Â  Â  Â  Â  n: 1, 
Â  Â  Â  Â  Â  Â  size: "1024x1024", 
Â  Â  Â  Â  Â  Â  quality: "standard"
Â  Â  Â  Â  });

Â  Â  Â  Â  const imageUrl = imageResponse.data[0].url;

Â  Â  Â  Â  // --- Step 3: Combine and Send Back ---
Â  Â  Â  Â  cardDetails.image_url = imageUrl; 

Â  Â  Â  Â  res.json(cardDetails);

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("AI Full Card Generation Error:", error); // Log the full error object
Â  Â  Â  Â  
        // === REVISION 2: MORE ROBUST ERROR HANDLING ===
Â  Â  Â  Â  let errorMessage = "An unexpected error occurred on the server.";
        let details = error.message;

        if (error.status === 401) {
            errorMessage = "Authentication Failed. Check your OPENAI_API_KEY.";
        } else if (error.response && error.response.data && error.response.data.error) {
Â  Â  Â  Â  Â  Â  errorMessage = "Failed to generate full card with AI. (DALL-E/GPT Error)";
Â  Â  Â  Â  Â  Â  details = error.response.data.error.message;
        }

Â  Â  Â  Â  res.status(500).json({ 
Â  Â  Â  Â  Â  Â  error: errorMessage,
Â  Â  Â  Â  Â  Â  details: details
Â  Â  Â  Â  });
Â  Â  }
});

// Health check route
app.get("/", (req, res) => {
  res.send("ðŸš€ Mystic Card Forge Backend is alive!");
});

// Start the server
app.listen(PORT, () => {
Â  Â  console.log(`Mystic Card Forge Backend running on port ${PORT}`);
});
